// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(uuid()) @db.Uuid
  documentNumber String         @unique
  fullName       String
  email          String?        @unique
  passwordHash   String
  role           Role           @relation(fields: [roleId], references: [id])
  roleId         String         @db.Uuid
  refreshTokens  RefreshToken[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@map("users")
  Responses Responses[]
}

model Question {
  id      String       @id @default(uuid()) @db.Uuid
  text    String
  type    QuestionType @default(SINGLE_CHOICE)
  options Options[]

  Responses Responses[]
}

model Options {
  id         String   @id @default(uuid()) @db.Uuid
  text       String
  questionId String   @db.Uuid
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  Responses Responses[]
}

model Responses {
  id         String   @id @default(uuid()) @db.Uuid
  userId     String   @db.Uuid
  questionId String   @db.Uuid
  optionId   String   @db.Uuid
  createdAt  DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question  Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  option    Options  @relation(fields: [optionId], references: [id], onDelete: Cascade)

  @@unique([userId, questionId])
}

model Role {
  id          String       @id @default(uuid()) @db.Uuid
  name        String       @unique
  permissions Permission[]
  users       User[]

  @@map("roles")
}

model Permission {
  id    String @id @default(uuid()) @db.Uuid
  name  String @unique
  roles Role[]

  @@map("permissions")
}

model RefreshToken {
  id        String   @id @default(uuid()) @db.Uuid
  token     String   @unique
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("refresh_tokens")
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
}
